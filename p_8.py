"""
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
"""

import time

s = time.time()

def bubble_sort(array):
    array_size = len(array)
    for i in range(array_size):
        for i in range(array_size - 1):
            if array[i] > array[i + 1]:
                temp = array[i]
                array[i] = array[i + 1]
                array[i + 1] = temp
            else:
                pass
        array_size -= 1
    return array

str_large  = '73167176531330624919225119674426574742355349194934969835203127745063262395783180\
16984801869478851843858615607891129494954595017379583319528532088055111254069874\
71585238630507156932909632952274430435576689664895044524452316173185640309871112\
17223831136222989342338030813533627661428280644448664523874930358907296290491560\
44077239071381051585930796086670172427121883998797908792274921901699720888093776\
65727333001053367881220235421809751254540594752243525849077116705560136048395864\
46706324415722155397536978179778461740649551492908625693219784686224828397224137\
56570560574902614079729686524145351004748216637048440319989000889524345065854122\
75886668811642717147992444292823086346567481391912316282458617866458359124566529\
47654568284891288314260769004224219022671055626321111109370544217506941658960408\
07198403850962455444362981230987879927244284909188845801561660979191338754992005\
24063689912560717606058861164671094050775410022569831552000559357297257163626956\
1882670428252483600823257530420752963450'
str_large
arr = []

for ch in str_large:
    arr.append(int(ch))

new_arr = []
for i in range(len(arr) - 13):
    prod = 1
    for j in range(13):
        prod *= arr[j + i]
    new_arr.append(prod)
bubble_sort(new_arr)

print(new_arr[len(new_arr) - 1])

e = time.time()
print(e - s)


#####################################################################plus rapide
#####################################################################
from functools import reduce
from operator import mul

a = time.time()
def solve():
    """ Compute the answer to Project Euler's problem #8 """

    # Build a list of the individual digits as integer objects
    series = """
        73167176531330624919225119674426574742355349194934
        96983520312774506326239578318016984801869478851843
        85861560789112949495459501737958331952853208805511
        12540698747158523863050715693290963295227443043557
        66896648950445244523161731856403098711121722383113
        62229893423380308135336276614282806444486645238749
        30358907296290491560440772390713810515859307960866
        70172427121883998797908792274921901699720888093776
        65727333001053367881220235421809751254540594752243
        52584907711670556013604839586446706324415722155397
        53697817977846174064955149290862569321978468622482
        83972241375657056057490261407972968652414535100474
        82166370484403199890008895243450658541227588666881
        16427171479924442928230863465674813919123162824586
        17866458359124566529476545682848912883142607690042
        24219022671055626321111109370544217506941658960408
        07198403850962455444362981230987879927244284909188
        84580156166097919133875499200524063689912560717606
        05886116467109405077541002256983155200055935729725
        71636269561882670428252483600823257530420752963450
    """
    series = series.replace(" ", "").replace("\n", "")
    integers = [int(character) for character in series]

    # Perform the search through all overlapping m-long subsets
    n = len(integers)
    m = 13
    answer = 0
    for i in range(n - m + 1):
        subset = integers[i:i+m]
        product = reduce(mul, subset, 1)
        answer = max(answer, product)
    return answer

print(solve())
b = time.time()
print(b-a)
